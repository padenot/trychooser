#!/usr/bin/env python

import sys

# A node in the decision tree
class N: # Node
  def __init__ (self, prompt, help, action):
    self.prompt = prompt
    self.help = help
    self.action = action

# this deletes a character, then moves to the next option.
class D: # delete_command
  def __init__(self, next):
    self.next = next

class NoPrompt:
  def __init__ (self, action):
    self.action = action

finish = object()
error = object()

################
# Build each node with it's data
################

a = N ("Run everything", "Run all platforms, tests and talos, and don't ask any more questions", ' -a')

b_od = N ("Both optimized and debug", "All builds and tests will run both on optimized and debug builds", ' -b do')
b_o = N ("Just optimized", "Only use optimized builds, do not use debug builds", ' -b o')
b_d = N ("Just debug", "Only use debug builds, do not use optimized builds", ' -b d')

p_all = N ("All platforms", "Build on all platforms, both desktop and mobile", ' -p all')
p_any = NoPrompt (" -p ")
p_linux = N ("Linux", "Build on i386 (32-bit) linux", 'linux,')
p_linux64 = N ("linux64", "Build on x86-64 (64-bit) linux", 'linux64,')
p_macosx = N ("macosx", "Build on Mac OSX 10.5 (i386, 32-bit, part of a universal binary)", 'macosx,')
p_macosx64 = N ("macosx64", "Build on Mac OSX 10.6 (x86-64, 64-bit, part of a universal binary)", 'macosx64,')
p_win32 = N ("win32", "Build on Windows", 'win32,')
p_android = N ("android-r7", "Build on Android", 'android-r7,')
p_maemo_qt = N ("maemo5-gtk", "Build on GTK version of Maemo", 'maemo5-gtk,')
p_maemo_gtk = N ("maemo5-qt", "Build on QT version of Maemo", 'maemo5-qt,')
p_none = NoPrompt (" -p none")

u_all = N ("All Unit tests", "Run all unit tests on all chosen platforms", ' -u all')
u_any = N ("Any unit tests", "Would you like to be asked about running each set of unit tests", ' -u ')
u_reftest = N ("reftest", "Run reftests", 'reftest,')
u_crashtest = N ("crashtest", "Run crashtest tests", 'crashtest,')
u_xpcshell = N ("xpcshell", "Run xpcshell tests", 'xpcshell,')
u_jsreftest = N ("jsreftest", "Run jsreftests", 'jsreftest,')
u_opengl = N ("opengl", "Run opengl tests", 'opengl,')
u_mochitests = N ("Run all mochitests", "Run all of the mochitests", 'mochitests,')
u_mochitests_any = N ("Run any mochitests", "Run any of the mochitests", '')
u_mochitest1 = N ("mochitest-1", "Run mochitest-1", 'mochitest-1,')
u_mochitest2 = N ("mochitest-2", "Run mochitest-2", 'mochitest-2,')
u_mochitest3 = N ("mochitest-3", "Run mochitest-3", 'mochitest-3,')
u_mochitest4 = N ("mochitest-4", "Run mochitest-4", 'mochitest-4,')
u_mochitest5 = N ("mochitest-5", "Run mochitest-5", 'mochitest-5,')
u_mochitesto = N ("mochitest-o", "Run mochitest-o", 'mochitest-o,')
u_none = NoPrompt (" -u none")

t_all = N ("All talos tests", "Run all talos tests on all chosen platforms", ' -t all')
t_any = N ("Any talos tests", "Would you like to be asked about running each set of talos tests", ' -t ')
t_nochrome = N ("nochrome", "Run nochrome suite", 'nochrome,')
t_dromaeo = N ("dromaeo", "Run dromaeo suite", 'dromaeo,')
t_a11y = N ("a11y", "Run a11y suite", 'a11y,')
t_svg = N ("svg", "Run svg suite", 'svg,')
t_chrome = N ("chrome", "Run chrome suite", 'chrome,')
t_tp4 = N ("tp4", "Run tp4 suite", 'tp4,')
t_dirty = N ("dirty", "Run dirty suite", 'dirty,')
t_scroll = N ("scroll", "Run scroll suite", 'scroll,')
t_cold = N ("cold", "Run cold suite", 'cold,')
t_v8 = N ("v8", "Run v8 suite", 'v8,')
t_none = NoPrompt (" -t none")



################
# Build decision tree. Each object has a y and n property, which are chosen if
# Y or N is chosen. That property is the next question.
################

a.y = finish
a.n = b_od

b_od.y = p_all
b_od.n = b_o
b_o.y = p_all
b_o.n = b_d
b_d.y = p_all
b_d.n = error

p_all.y = u_all
p_all.n = p_any
p_any.next = p_linux
p_linux.y = p_linux64
p_linux.n = p_linux64
p_linux64.y = p_macosx
p_linux64.n = p_macosx
p_macosx.y = p_macosx64
p_macosx.n = p_macosx64
p_macosx64.y = p_win32
p_macosx64.n = p_win32
p_win32.y = p_android
p_win32.n = p_android
p_android.y = p_maemo_qt
p_android.n = p_maemo_qt
p_maemo_qt.y = p_maemo_gtk
p_maemo_qt.n = p_maemo_gtk
p_maemo_gtk.y = D(u_all)
p_maemo_gtk.n = D(u_all)

u_all.y = t_all
u_all.n = u_any
u_any.y = u_reftest
u_any.n = u_none
u_none.next = t_all
u_reftest.y = u_crashtest
u_reftest.n = u_crashtest
u_crashtest.y = u_xpcshell
u_crashtest.n = u_xpcshell
u_xpcshell.y = u_jsreftest
u_xpcshell.n = u_jsreftest
u_jsreftest.y = u_opengl
u_jsreftest.n = u_opengl
u_opengl.y = u_mochitests
u_opengl.n = u_mochitests
u_mochitests.y = D(t_all)
u_mochitests.n = u_mochitests_any
u_mochitests_any.y = u_mochitest1
u_mochitests_any.n = D(t_all)
u_mochitest1.y = u_mochitest2
u_mochitest1.n = u_mochitest2
u_mochitest2.y = u_mochitest3
u_mochitest2.n = u_mochitest3
u_mochitest3.y = u_mochitest4
u_mochitest3.n = u_mochitest4
u_mochitest4.y = u_mochitest5
u_mochitest4.n = u_mochitest5
u_mochitest5.y = u_mochitesto
u_mochitest5.n = u_mochitesto
u_mochitesto.y = D(t_all)
u_mochitesto.n = D(t_all)

t_all.y = finish
t_all.n = t_any
t_any.y = t_nochrome
t_any.n = t_none
t_none.next = finish
t_nochrome.y = t_dromaeo
t_nochrome.n = t_dromaeo
t_dromaeo.y = t_a11y
t_dromaeo.n = t_a11y
t_a11y.y = t_svg
t_a11y.n = t_svg
t_svg.y = t_chrome
t_svg.n = t_chrome
t_chrome.y = t_tp4
t_chrome.n = t_tp4
t_tp4.y = t_dirty
t_tp4.n = t_dirty
t_dirty.y = t_scroll
t_dirty.n = t_scroll
t_scroll.y = t_cold
t_scroll.n = t_cold
t_cold.y = t_v8
t_cold.n = t_v8
t_v8.y = D(finish)
t_v8.n = D(finish)

################
# The actual algorithm is simple
################

def run_algorithm(state):

  node = a
  string = 'try:'
  while node != finish:
    if node == error:
      state.say("Invalid selection")
      state.exit(-1)
    elif isinstance(node, D):
      string = string[:-1] # remove last character
      node = node.next
    elif isinstance(node, NoPrompt):
      string += node.action
      node = node.next
    elif isinstance(node, N):
      state.say(node.prompt + '?\n')
      input = state.prompt()
      if input in 'Yy':
        string += node.action
        node = node.y
      elif input in 'Nn':
        node = node.n
      elif input == '?':
        state.say(node.help)
      else:
        state.say("Invalid option, please try again")



  ################
  # Hard to test these above, so use string search for weird flag combination
  ################

  desktops = 'linux,linux64,macosx,macosx64,win32,android-r7,maemo5-gtk,maemo5-qt'.split(',')
  unittests = 'reftest,crashtest,xpcshell,jsreftest,opengl,mochitest-1,mochitest-2,mochitest-3,mochitest-4,mochitest-5,mochitest-o'.split(',')
  taloss = 'nochrome,dromaeo,a11y,svg,chrome,tp4,dirty,scroll,cold,v8'.split(',')


  if string.find ('-p') + string.find('-a') == -2:
    state.say("no platform selected")
    state.say ("Invalid selection: " + string)
    state.exit(-1)

  if string.find ('-b') + string.find('-a') == -2:
    state.say ("no build selected")
    state.say ("Invalid selection: " + string)
    state.exit(-1)

  if string.find ('-u') != -1 and \
     string.find ('-u all') == -1 and \
     string.find ('-u none') == -1 and \
     (sum([string.find(x) for x in unittests]) == -1*len(unittests)):
    state.say ("no unit tests selected, despite asking for some")
    state.say ("Invalid selection: " + string)
    state.exit(-1)

  if string.find ('-t') != -1 and \
     string.find ('-t all') == -1 and \
     string.find ('-t none') == -1 and \
     (sum([string.find(x) for x in taloss]) == -1*len(taloss)):
    state.say ("no talos tests selected, despite asking for some")
    state.say ("Invalid selection: " + string)
    state.exit(-1)

  return string



if __name__ == '__main__':


  class Test_interface:

    # print isn't a function
    def say(self, string):
      print '\n' + string,

    def prompt(self):
      return raw_input('[Ynh?]\n')

    def exit(self, code):
      sys.exit(code)


  print run_algorithm(Test_interface())


else:

  from mercurial import ui
  from mercurial import extensions
  from mercurial.i18n import _
  from mercurial import commands
  from mercurial import util
  from mercurial.node import short

  class HG_interface:

    def __init__ (self, ui, repo):
      self.ui = ui
      self.repo = repo

    def say(self, string):
      self.ui.write(string)
      self.ui.flush()

    def prompt(self):
      index = self.ui.promptchoice('[Ynh?]', ['&Yes', '&no', '&h', '&?'], default=0)
      return 'Ynh?'[index]

    def exit(self, code):
      sys.exit(code)


  def run_mercurial_command(ui, repo, *args, **opts):
    """Build a TryChooser string by asking a few questions.

For all questions, choosing Y means adding something to the TryChooser string. Choosing ? shows context-sensitive help."""

    try:
      mq = extensions.find('mq')
    except KeyError:
      ui.warn(_("Warning: mq extension hasn't been found, this is going to print the syntax only.\n"))
      string = run_algorithm(HG_interface(ui, repo))
      ui.write(string + '\n')
      return

    if repo[None].dirty():
      raise util.Abort(_("local changes found, refresh first"))
    if not repo.mq.applied:
      raise util.Abort(_("no patch currently applied"))

    if opts.get('message'):
      msg = opts.get('message')
      if msg.find('try:') == -1:
        msg = 'try: ' + msg
    else:
      msg = run_algorithm(HG_interface(ui, repo))

    ui.write(_("The following try message is going to be used:\n%s\n") % msg)

    ui.write(_("Creates the trychooser mq entry...\n"))
    mq.new(ui, repo, 'trychooser', message=msg)

    if opts.get('pretend'):
      ui.write(_("Pretending to push to try server...\n"))
    else:
      ui.write(_("Push to try server...\n"))
      commands.push(ui, repo, "ssh://hg.mozilla.org/try", force=True)

    push_id = short(repo.mq.applied[-1].node)

    mq.pop(ui, repo, Force=false, name='', all=False)
    mq.delete(ui, repo, 'trychooser')

    tbpl_try_url = "http://tbpl.mozilla.org/?tree=Try&rev=" + push_id
    ui.write(_("You can find your try results at the following URL:\n%s\n") % tbpl_try_url)

  # Mercurial interface
  cmdtable = {
      "trychooser":
      (run_mercurial_command,
        [
          ('p', 'pretend', False, _('don\'t push to the try server')),
          ('m', 'message', '', _('use text as try message'))
        ],
        _('hg trychooser [-p] [-m TEXT]')
      )
  }



# TODO: add an MQ option to qrefresh
